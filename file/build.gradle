import groovy.lang.Closure

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'file'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// minio
	implementation("io.minio:minio:8.5.11")

	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
	implementation("org.springdoc:springdoc-openapi-starter-common:2.7.0")
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation("org.springframework.boot:spring-boot-testcontainers")
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:minio")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
	}
	classDirectories.setFrom(files(classDirectories.files.collect(({
		fileTree(dir: it, excludes: [
				'file/config/*',
				'file/exception/*',
				'file/utils/*',
				'file/FileApplication.class'
		])
	} as Closure<Object>))))
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'BUNDLE'
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}
	classDirectories.setFrom(files(classDirectories.files.collect(({
		fileTree(dir: it, excludes: [
				'file/config/*',
				'file/exception/*',
				'file/utils/*',
				'file/FileApplication.class'
		])
	} as Closure<Object>))))
}
